// Generated by CoffeeScript 1.7.1
(function() {
  var HttpClient, Koofr, fmt, q, random32, url, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  url = require('url');

  _ = require('lodash');

  q = require('q');

  HttpClient = require('simple-http-client');

  fmt = function(path, query) {
    return url.format({
      pathname: path,
      query: query
    });
  };

  random32 = function() {
    return _.range(32).map(function() {
      return (Math.random() * 16 >> 0).toString(16);
    }).join('');
  };

  Koofr = (function() {
    function Koofr(endpoint) {
      this.filesPut = __bind(this.filesPut, this);
      this.filesGet = __bind(this.filesGet, this);
      this.filesMove = __bind(this.filesMove, this);
      this.filesCopy = __bind(this.filesCopy, this);
      this.filesRemove = __bind(this.filesRemove, this);
      this.filesRename = __bind(this.filesRename, this);
      this.filesMkdir = __bind(this.filesMkdir, this);
      this.filesInfo = __bind(this.filesInfo, this);
      this.filesList = __bind(this.filesList, this);
      this.mounts = __bind(this.mounts, this);
      this.request = __bind(this.request, this);
      this.authenticate = __bind(this.authenticate, this);
      this.options = {};
      this.httpClient = new HttpClient();
      if (endpoint.slice(-1) === '/') {
        endpoint = endpoint.slice(0, -1);
      }
      _.merge(this.options, url.parse(endpoint));
    }

    Koofr.prototype.authenticate = function(email, password) {
      return this.request('GET', '/token', {
        headers: {
          'X-Koofr-Email': email,
          'X-Koofr-Password': password
        }
      }).then((function(_this) {
        return function(res) {
          if (res.headers['x-koofr-token']) {
            _this.token = res.headers['x-koofr-token'];
            return _this;
          } else {
            throw new Error('Authentication failed');
          }
        };
      })(this));
    };

    Koofr.prototype.request = function(method, path, options) {
      var boundaryKey, callback, defer, file, request;
      if (_.isFunction(options)) {
        callback = options;
        options = {};
      }
      options = _.merge({
        headers: {}
      }, this.options, options);
      file = options.file;
      boundaryKey = null;
      if (file != null) {
        delete options.file;
        options.pipeReq = true;
        boundaryKey = random32();
        options.headers['Content-Type'] = "multipart/form-data; boundary=\"" + boundaryKey + "\"";
      }
      if (this.token != null) {
        options.headers['Authorization'] = "Token " + this.token;
      }
      defer = q.defer();
      request = this.httpClient.request(method, path, options, defer.makeNodeResolver());
      if (file != null) {
        request.write(("--" + boundaryKey + "\r\n") + "Content-Type: application/octet-stream\r\n" + ("Content-Disposition: form-data; name=\"file\"; filename=\"" + file.name + "\"\r\n") + "Content-Transfer-Encoding: binary\r\n\r\n");
        if (file.stream.on != null) {
          file.stream.on('end', function() {
            return request.end("\r\n--" + boundaryKey + "--");
          }).pipe(request, {
            end: false
          });
        } else {
          request.write(file.stream);
          request.end("\r\n--" + boundaryKey + "--");
        }
      }
      process.nextTick(function() {
        return defer.notify(request);
      });
      return defer.promise;
    };

    Koofr.prototype.mounts = function() {
      return this.request('GET', "/api/v2/mounts").then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
          return res.json.mounts;
        };
      })(this));
    };

    Koofr.prototype.filesList = function(mountId, path) {
      return this.request('GET', fmt("/api/v2/mounts/" + mountId + "/files/list", {
        path: path
      })).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
          return res.json.files;
        };
      })(this));
    };

    Koofr.prototype.filesInfo = function(mountId, path) {
      return this.request('GET', fmt("/api/v2/mounts/" + mountId + "/files/info", {
        path: path
      })).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
          return res.json;
        };
      })(this));
    };

    Koofr.prototype.filesMkdir = function(mountId, path, name) {
      var json, p;
      p = fmt("/api/v2/mounts/" + mountId + "/files/folder", {
        path: path
      });
      json = {
        name: name
      };
      return this.request('POST', p, {
        json: json
      }).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
        };
      })(this));
    };

    Koofr.prototype.filesRename = function(mountId, path, name) {
      var json, p;
      p = fmt("/api/v2/mounts/" + mountId + "/files/rename", {
        path: path
      });
      json = {
        name: name
      };
      return this.request('PUT', p, {
        json: json
      }).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
        };
      })(this));
    };

    Koofr.prototype.filesRemove = function(mountId, path) {
      return this.request('DELETE', fmt("/api/v2/mounts/" + mountId + "/files/remove", {
        path: path
      })).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
        };
      })(this));
    };

    Koofr.prototype.filesCopy = function(mountId, path, toMountId, toPath) {
      var json, p;
      p = fmt("/api/v2/mounts/" + mountId + "/files/copy", {
        path: path
      });
      json = {
        toMountId: toMountId,
        toPath: toPath
      };
      return this.request('PUT', p, {
        json: json
      }).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
        };
      })(this));
    };

    Koofr.prototype.filesMove = function(mountId, path, toMountId, toPath) {
      var json, p;
      p = fmt("/api/v2/mounts/" + mountId + "/files/move", {
        path: path
      });
      json = {
        toMountId: toMountId,
        toPath: toPath
      };
      return this.request('PUT', p, {
        json: json
      }).then((function(_this) {
        return function(res) {
          if (res.statusCode !== 200) {
            throw res;
          }
        };
      })(this));
    };

    Koofr.prototype.filesGet = function(mountId, path, start, end) {
      var headers, link;
      link = "/content/api/v2/mounts/" + mountId + "/files/get?path=" + (encodeURIComponent(path));
      headers = {};
      if ((start != null) && (end != null)) {
        headers['Range'] = "bytes=" + start + "-" + end;
      }
      return this.request('GET', link, {
        headers: headers,
        pipeRes: true
      }).then(function(res) {
        if (res.statusCode !== 200 && res.statusCode !== 206) {
          res.on('data', (function() {}));
          throw res;
        }
        return res;
      });
    };

    Koofr.prototype.filesPut = function(mountId, path, name, data) {
      var file, link;
      link = "/content/api/v2/mounts/" + mountId + "/files/put?path=" + (encodeURIComponent(path));
      file = {
        name: name,
        stream: data
      };
      return this.request('POST', link, {
        file: file
      }).then(function(res) {
        if (res.statusCode !== 200) {
          throw res;
        }
        return {
          name: res.json[0].name
        };
      });
    };

    return Koofr;

  })();

  module.exports = Koofr;

}).call(this);
